// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package lib_test

import (
	"github.com/theskyinflames/word2png/lib"
	"sync"
)

// Ensure, that DecrypterMock does implement lib.Decrypter.
// If this is not the case, regenerate this file with moq.
var _ lib.Decrypter = &DecrypterMock{}

// DecrypterMock is a mock implementation of lib.Decrypter.
//
// 	func TestSomethingThatUsesDecrypter(t *testing.T) {
//
// 		// make and configure a mocked lib.Decrypter
// 		mockedDecrypter := &DecrypterMock{
// 			DecryptWordsFunc: func(encryptedWords [][]byte) ([]string, error) {
// 				panic("mock out the DecryptWords method")
// 			},
// 		}
//
// 		// use mockedDecrypter in code that requires lib.Decrypter
// 		// and then make assertions.
//
// 	}
type DecrypterMock struct {
	// DecryptWordsFunc mocks the DecryptWords method.
	DecryptWordsFunc func(encryptedWords [][]byte) ([]string, error)

	// calls tracks calls to the methods.
	calls struct {
		// DecryptWords holds details about calls to the DecryptWords method.
		DecryptWords []struct {
			// EncryptedWords is the encryptedWords argument value.
			EncryptedWords [][]byte
		}
	}
	lockDecryptWords sync.RWMutex
}

// DecryptWords calls DecryptWordsFunc.
func (mock *DecrypterMock) DecryptWords(encryptedWords [][]byte) ([]string, error) {
	if mock.DecryptWordsFunc == nil {
		panic("DecrypterMock.DecryptWordsFunc: method is nil but Decrypter.DecryptWords was just called")
	}
	callInfo := struct {
		EncryptedWords [][]byte
	}{
		EncryptedWords: encryptedWords,
	}
	mock.lockDecryptWords.Lock()
	mock.calls.DecryptWords = append(mock.calls.DecryptWords, callInfo)
	mock.lockDecryptWords.Unlock()
	return mock.DecryptWordsFunc(encryptedWords)
}

// DecryptWordsCalls gets all the calls that were made to DecryptWords.
// Check the length with:
//     len(mockedDecrypter.DecryptWordsCalls())
func (mock *DecrypterMock) DecryptWordsCalls() []struct {
	EncryptedWords [][]byte
} {
	var calls []struct {
		EncryptedWords [][]byte
	}
	mock.lockDecryptWords.RLock()
	calls = mock.calls.DecryptWords
	mock.lockDecryptWords.RUnlock()
	return calls
}
