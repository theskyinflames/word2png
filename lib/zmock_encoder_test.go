// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package lib_test

import (
	"github.com/theskyinflames/word2png/lib"
	"sync"
)

// Ensure, that EncrypterMock does implement lib.Encrypter.
// If this is not the case, regenerate this file with moq.
var _ lib.Encrypter = &EncrypterMock{}

// EncrypterMock is a mock implementation of lib.Encrypter.
//
// 	func TestSomethingThatUsesEncrypter(t *testing.T) {
//
// 		// make and configure a mocked lib.Encrypter
// 		mockedEncrypter := &EncrypterMock{
// 			EncryptWordsFunc: func(words []string) ([][]byte, error) {
// 				panic("mock out the EncryptWords method")
// 			},
// 		}
//
// 		// use mockedEncrypter in code that requires lib.Encrypter
// 		// and then make assertions.
//
// 	}
type EncrypterMock struct {
	// EncryptWordsFunc mocks the EncryptWords method.
	EncryptWordsFunc func(words []string) ([][]byte, error)

	// calls tracks calls to the methods.
	calls struct {
		// EncryptWords holds details about calls to the EncryptWords method.
		EncryptWords []struct {
			// Words is the words argument value.
			Words []string
		}
	}
	lockEncryptWords sync.RWMutex
}

// EncryptWords calls EncryptWordsFunc.
func (mock *EncrypterMock) EncryptWords(words []string) ([][]byte, error) {
	if mock.EncryptWordsFunc == nil {
		panic("EncrypterMock.EncryptWordsFunc: method is nil but Encrypter.EncryptWords was just called")
	}
	callInfo := struct {
		Words []string
	}{
		Words: words,
	}
	mock.lockEncryptWords.Lock()
	mock.calls.EncryptWords = append(mock.calls.EncryptWords, callInfo)
	mock.lockEncryptWords.Unlock()
	return mock.EncryptWordsFunc(words)
}

// EncryptWordsCalls gets all the calls that were made to EncryptWords.
// Check the length with:
//     len(mockedEncrypter.EncryptWordsCalls())
func (mock *EncrypterMock) EncryptWordsCalls() []struct {
	Words []string
} {
	var calls []struct {
		Words []string
	}
	mock.lockEncryptWords.RLock()
	calls = mock.calls.EncryptWords
	mock.lockEncryptWords.RUnlock()
	return calls
}
